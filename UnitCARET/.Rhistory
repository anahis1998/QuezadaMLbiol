5) #nnet
mode <- list()
acc1<-data.frame(model=names_model,
Accuracy=NA*numeric(length(names_model)),
Kappa=NA*numeric(length(names_model)),
AccuracySD=NA*numeric(length(names_model)),
KappaSD=NA*numeric(length(names_model)))
for (counter in 1:length(names_model))
{
print(paste0(names_model[counter],"; ",counter," of ",length(names_model)))
mode[[counter]]<-train(x=x_train,y=y_train,method=names_model[counter],
trControl=traincontrol,tuneLength = tLook[counter],
preProcess=c("center","scale"))
ind<-which(mode[[counter]]$results$Accuracy==max(mode[[counter]]$results$Accuracy))
ind<-ind[1]
acc1[counter,2:5]<-mode[[counter]]$results[ind,c("Accuracy","Kappa","AccuracySD",
"KappaSD")]
}
load("C:/Users/asque/Downloads/CaretClassificationDemo_WorkspaceAtEnd.RData")
acc1
ing to the highest accuracy is
m_rpart$results
m_rpart
m_rpart$results
m_rpart$results
plot(m_rpart$results$cp, 1-m_rpart$results$Accuracy,
type="l")
plot(m_rpart$results$cp, 1-m_rpart$results$Accuracy,
type="l")
plot(m_rpart$results$cp,1-m_rpart$results$Accuracy,
type="l")
m_rpart$results
plot(m_rpart$results$cp,1-m_rpart$results$Accuracy,
type="l")
max(m_rpart$results$Accuracy)#--> 0.9984924
#predictions
air_pre <- predict(m_rpart,train)
#predictions
air_pre <- predict(m_rpart, train)
m_rpart1<-train(x=x_train,y=y_train,method="rpart",
trControl=traincontrol,tuneLength=15)
set.seed(123)
m_rpart2<-train(x=x_train,y=y_train,method="rpart",
trControl=traincontrol,tuneLength=15,
preProcess=c("center","scale"))
cbind(m_rpart1$results$Accuracy,m_rpart2$results$Accuracy)
m_rpart1$results$Accuracy-m_rpart2$results$Accuracy
model_knn$results
head(model_knn$resultsf,5)
head(model_knn$resultsf,4)
head(model_knn$resultsf)
max(model_knn$results$Accuracy)#--> 0.9632745
head(model_knn$results)
head(model_knn$results, 5)
max(model_knn$results$Accuracy)#--> 0.9632745
head(model_knn$results)
m_C5p0$results
max(m_C5p0$results$Accuracy) #--> 0.9984848
max(m_C5p0$results$Accuracy) #-->0.9385346
max(m_C5p0$results$Accuracy) #-->0.9385346
#3 Support vector machine
install.packages("kernlab")
library(kernlab)
modelLookup("svmRadial")
m_svmR <- train(x = x_train,
y = y_train,
method = "svmRadial",
trControl = train_control,
tuneLength = 4,
preProcess = c("center","scale"))
m_svmR <- train(x = x_train,
y = y_train,
method = "svmRadial",
trControl = traincontrol,
tuneLength = 4,
preProcess = c("center","scale"))
max(m_svmR$results$Accuracy)
#3 Learning vector quantization
library(class)
modelLookup("lvq")
model_lvq <-  train( x= x_train,
y = y_train,
method = "lvq",
trControl = traincontrol,
tuneLength = 5)
max(model_lvq$results$Accuracy)
model_boostedtree <-  train( x= x_train,
y = y_train,
method = "blackboost",
trControl = traincontrol,
tuneLength = 5,
preProcess = c("center","scale"))
max(m_boostedtree$results$Accuracy)
m_boostedt <-  train( x= x_train,
y = y_train,
method = "blackboost",
trControl = traincontrol,
tuneLength = 5,
preProcess = c("center","scale"))
max(m_boostedt$results$Accuracy)
#5 Learning extreme machine
library(elmNN)
#5 Learning extreme machine
install.packages("elmNN")
library(elmNN)
library(elmNN)
#5 Learning extreme machine
install.packages("earth")
library(earth)
modelLookup("earth")
m_earth <-  train( x= x_train,
y = y_train,
method = "earth",
trControl = traincontrol,
tuneLength = 2)
max(m_earth$results$Accuracy)
#6 Neural network
install.packages("mxnet")
library(mxnet)
library(mlbench)
#loop
traincontrol <- trainControl(method="repeatedcv",
number=10, repeats=3)
library(mlbench)
library(mx.mlp)
install.packages('mlbench')
library(mlbench)
modelLookup("mxnet")
modelLookup("mlbench")
m_neural <- train(x= x_train,
y= y_train,
method="mxnet",
trControl = traincontrol,
tuneLength =5)
m_neural <- train(x= x_train,
y= y_train,
method="mxnet",
trControl = traincontrol,
tuneLength =5)
library(mxnet)
m_neural <- train(x= x_train,
y= y_train,
method="mxnet",
trControl = traincontrol,
tuneLength =5)
#6 Neural network
install.packages("nnet")
library(nnet)
modelLookup("nnet")
modelLookup("avNNet")
modelLookup("avNNet")
install.packages("layer1")
#3 Support vector machine
install.packages("HiDimDA")
library(HiDimDA)
modelLookup("RFlda")
library(HiDimDA)
modelLookup("RFlda")
#2 Quinlan's C5.0 algorithm
modelLookup("C5.0")
m_svmR <- train(x = x_train,
y = y_train,
method = "svmRadial",
trControl = traincontrol,
tuneLength = 4,
preProcess = c("center","scale"))
model_RFlda <-  train( x= x_train,
y = y_train,
method = "RFlda",
trControl = traincontrol,
tuneLength = 3)
#3 Support vector machine
install.packages("kernlab")
library(kernlab)
modelLookup("kernlab")
model_RFlda <-  train( x= x_train,
y = y_train,
method = "kernlab",
trControl = traincontrol,
tuneLength = 3)
#3 Support vector machine
install.packages("kernlab")
library(kernlab)
modelLookup("svmRadial")
model_svmR <- train(x = x_val,
y = y_val,
method = "svmRadial",
trControl = train_control,
tuneLength = 4,
preProcess = c("center","scale"))
max(model_svmR$results$Accuracy)  #--> 0.9723278
modelLookup("svmRadial")
#This is the main code.
#Setting my working directory:
setwd("C:/Users/asque/Documents/ML/QuezadaMLbiol/UnitCARET")
data <- read.csv("AirQualityUCI1.csv")
graphics.off()
library(caret)
install.packages("RANN")
library(RANN)
#Data preparation
head(data)
dim(data)
data <- data[, 3:15]
is.na(data)
#prepare data
#binary column
umbral_Nox.GT <- 53
umbral_C6H6 <- 5
umbral_CO <- 6
data$contaminacion <- ifelse(data$CO.GT. > umbral_CO |
data$C6H6.GT. > umbral_C6H6 |
data$NOx.GT. > umbral_Nox.GT, 1, 0)
set.seed(101)
data_clean <- na.omit(data)
#my contaminacion column is numeric, I need to transform to factor
data_clean$contaminacion <- factor(data_clean$contaminacion,
levels = c(0, 1),
labels = c("L", "H"))
data1<-createDataPartition(data_clean$contaminacion,
p=0.8,list=FALSE)
train <- data_clean[data1,]
test <- data_clean[-data1]
x_train <- train[, -ncol(train)]
y_train <- train$contaminacion
#The doParallel Package
library(doParallel)
clust <- makePSOCKcluster(5)
registerDoParallel(clust)
#Information on the model
modelLookup("rpart")
#Train Control
traincontrol<-trainControl(method="repeatedcv",number=10,repeats=3)
m_rpart<-train(x=x_train,y=y_train,
method="rpart",
trControl=traincontrol)
class(m_rpart)
names(m_rpart)
m_rpart
m_rpart$results
prediction <- predict(m_rpart, train)
table(prediction, y_train)
predic_model <- predict(m_rpart$finalModel, train)
predic_model_1 <- apply(X=predic_model,MARGIN=1,
FUN=function(x){ifelse(x[1]<.5,"M","B")})
sum(prediction==predic_model_1)
#tuneLength --> ask what is t?
m_rpart<-train(x=x_train,y=y_train,method="rpart",
trControl=traincontrol,tuneLength=15)
m_rpart$results
plot(m_rpart$results$cp, 1-m_rpart$results$Accuracy,
type="l")
#tuneGrid
tg <- data.frame(cp=seq(from=0.01, to=0.8, by=0.01))
m_rpart<-train(x=x_train,y=y_train,
method="rpart",
trControl=traincontrol,
tuneGrid=tg)
m_rpart$results
plot(m_rpart$results$cp,1-m_rpart$results$Accuracy,
type="l")
max(m_rpart$results$Accuracy)#--> 0.9144444
m_rpart$results
#experiemntal
set.seed(123)
m_rpart1<-train(x=x_train,y=y_train,method="rpart",
trControl=traincontrol,tuneLength=15)
m_rpart2<-train(x=x_train,
y=y_train,
method="rpart",
trControl=traincontrol,
tuneLength=15,
preProcess=c("center","scale"))
cbind(m_rpart1$results$Accuracy,m_rpart2$results$Accuracy)
m_rpart1$results$Accuracy-m_rpart2$results$Accuracy
#Models
#1k-nearest neighbors
modelLookup("knn")
model_knn<-train(x=x_train,y=y_train,method="knn",
trControl=traincontrol,tuneLength=15,
preProcess=c("center","scale"))
model_knn$results
head(model_knn$results)
max(model_knn$results$Accuracy)#--> 0.9632745
#2 Quinlan's C5.0 algorithm
modelLookup("C5.0")
m_C5p0<-train(x=x_train,
y=y_train,
method="C5.0",
trControl=traincontrol,
tuneLength=3,
preProcess=c("center","scale"))
m_C5p0$results
max(m_C5p0$results$Accuracy) #-->0.9385346
#3 Support vector machine
install.packages("kernlab")
library(kernlab)
modelLookup("svmRadial")
model_svmR <- train(x = x_val,
y = y_val,
method = "svmRadial",
trControl = train_control,
tuneLength = 4,
preProcess = c("center","scale"))
model_svmR <- train(x = x_val,
y = y_val,
method = "svmRadial",
trControl = traincontrol,
tuneLength = 4,
preProcess = c("center","scale"))
model_svmR <- train(x = x_train,
y = y_train,
method = "svmRadial",
trControl = traincontrol,
tuneLength = 4,
preProcess = c("center","scale"))
#3 Learning vector quantization
library(class)
modelLookup("lvq")
model_lvq <-  train( x= x_train,
y = y_train,
method = "lvq",
trControl = traincontrol,
tuneLength = 5)
max(model_lvq$results$Accuracy) #---> 0.9486055
model_lvq <-  train( x= x_train,
y = y_train,
method = "lvq",
trControl = traincontrol,
tuneLength = 1)
m_lvq <- train(x= x_train,
y= y_train,
method= "lvq",
trControl= traincontrol,
tuneLength=5)
modelLookup("C5.0")
#2 Quinlan's C5.0 algorithm
modelLookup("C5.0")
library(caret)
#3 Support vector machine
install.packages("kernlab")
library(kernlab)
modelLookup("svmRadial")
model_svm <- train(x = x_train,
y = y_train,
method = "svmRadial",
trControl = traincontrol,
tuneLength = 4,
preProcess = c("center","scale"))
max(model_svm$results$Accuracy)  #--> 0.9723278
#3 Learning vector quantization
library(class)
modelLookup("lvq")
model_lvq <-  train( x= x_train,
y = y_train,
method = "lvq",
trControl = traincontrol,
tuneLength = 1)
max(m_lvq$results$Accuracy) #---> 0.9486055
m_lvq <-  train( x= x_train,
y = y_train,
method = "lvq",
trControl = traincontrol,
tuneLength = 1)
max(m_lvq$results$Accuracy) #---> 0.9486055
m_lvq <-  train( x= x_train,
y = y_train,
method = "lvq",
trControl = traincontrol,
tuneLength = 1)
max(m_lvq$results$Accuracy) #---> 0.9350746
library(party)
library(partykit)
library(plyr)
library(mboost)
modelLookup("blackboost")
m_boostedt <-  train( x= x_train,
y = y_train,
method = "blackboost",
trControl = traincontrol,
tuneLength = 5,
preProcess = c("center","scale"))
max(m_boostedt$results$Accuracy) #--> 0.9929594
modelLookup("rf")
m_randomF <- train( x= x_train,
y = y_train,
method = "rf",
trControl = traincontrol,
tuneLength = 5,
preProcess = c("center","scale"))
max(m_randomF$results$Accuracy)
#2 Adaptive Boosting
library(adabag)
modelLookup("AdaBoost.M1")
m_adaB <- train(x = x_val,
y = y_val,
method = "AdaBoost.M1",
trControl = train_control,
tuneLength = 3,
preProcess = c("center","scale"))
m_adaB <- train(x = x_train,
y = y_train,
method = "AdaBoost.M1",
trControl = traincontrol,
tuneLength = 3,
preProcess = c("center","scale"))
names_model <- c("rpart",
"knn",
"C5.0",
"svmRadial",
"lvq",
"blackboost",
"earth",
"rf",
"AdaBoost.M1", "trebag")
tLook <-c(15, 15, 3,4,1,5,2,5,3,5)
mode <- list()
acc1<-data.frame(model=names_model,
Accuracy=NA*numeric(length(names_model)),
Kappa=NA*numeric(length(names_model)),
AccuracySD=NA*numeric(length(names_model)),
KappaSD=NA*numeric(length(names_model)))
for (counter in 1:length(names_model))
{
print(paste0(names_model[counter],"; ",counter," of ",length(names_model)))
mode[[counter]]<-train(x=x_train,y=y_train,method=names_model[counter],
trControl=traincontrol,tuneLength = tLook[counter],
preProcess=c("center","scale"))
ind<-which(mode[[counter]]$results$Accuracy==max(mode[[counter]]$results$Accuracy))
ind<-ind[1]
acc1[counter,2:5]<-mode[[counter]]$results[ind,c("Accuracy","Kappa","AccuracySD",
"KappaSD")]
}
acc1
max(m_bagging$results$Accuracy) #-->
m_bagging <- train(x = x_train,
y = y_train,
method = "treebag",
trControl = traincontrol,
tuneLength = 5,
preProcess = c("center","scale"))
max(m_bagging$results$Accuracy) #-->
acc1
max(m_adaB$results$Accuracy) #-->
m_adaB <- train(x = x_train,
y = y_train,
method = "AdaBoost.M1",
trControl = traincontrol,
tuneLength = 3,
preProcess = c("center","scale"))
max(m_adaB$results$Accuracy) #-->
pred_test <- predict(m_randomF,
newdata= test)
test
data1
data_clean$contaminacion
data1<-createDataPartition(data_clean$contaminacion,
p=0.8,list=FALSE)
data1
train <- data_clean[data1,]
train
test <- data_clean[-data1]
test
train
test <- data_clean[-data1,]
test
pred_test <- predict(m_randomF,
newdata= test)
pred_test
confusionMatrix(pred_test, test$brte_presence_absence$contaminacion)
confusionMatrix(pred_test, test$contaminacion)
save.image(file="CaretClassf.RData")
acc1
names_model <- c("rpart",
"knn",
"C5.0",
"svmRadial",
"lvq",
"blackboost",
"earth",
"rf",
"AdaBoost.M1", "treebag")
names_model <- c("rpart",
"knn",
"C5.0",
"svmRadial",
"lvq",
"blackboost",
"earth",
"rf",
"AdaBoost.M1", "treebag")
tLook <-c(15, 15, 3,4,1,5,2,5,3,5)
mode <- list()
acc1<-data.frame(model=names_model,
Accuracy=NA*numeric(length(names_model)),
Kappa=NA*numeric(length(names_model)),
AccuracySD=NA*numeric(length(names_model)),
KappaSD=NA*numeric(length(names_model)))
for (counter in 1:length(names_model))
{
print(paste0(names_model[counter],"; ",counter," of ",length(names_model)))
mode[[counter]]<-train(x=x_train,y=y_train,method=names_model[counter],
trControl=traincontrol,tuneLength = tLook[counter],
preProcess=c("center","scale"))
ind<-which(mode[[counter]]$results$Accuracy==max(mode[[counter]]$results$Accuracy))
ind<-ind[1]
acc1[counter,2:5]<-mode[[counter]]$results[ind,c("Accuracy","Kappa","AccuracySD",
"KappaSD")]
}
acc1
confusionMatrix(pred_test, test$contaminacion)
acc1
