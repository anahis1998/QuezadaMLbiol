#MODULARITY ASSIGNMENT
#Name: Anahi Quezada
#DATA: Precipitation and Temperature values from weather stations all over the USA
#This is the main code.
#Setting my working directory:
setwd("C:/Users/asque/Documents/ML/QuezadaMLbiol/UnitModularity")
#----Workflow
#1. Connect to my github repositorie (check)
#2. Packages to use
install.packages("readRDS")
install.packages("maps")
library(readRDS)
library(maps)
#----Workflow
#1. Connect to my github repositorie (check)
#2. Packages to use
install.packages("readRDS")
install.packages("maps")
library(readRDS)
library(maps)
library(dplyr)
library(ggplot2)
library(viridis)
library(gridExtra)
precip <- readRDS(file = "USAAnnualPcpn1950_2008.rds")
temp <- readRDS(file="USAAnnualTemp1950_2008.rds")
dim(precip)
dim(temp)
colnames(precip)
colnames(temp)
#My dataset's content
anyNA(precip) #--> TRUE
anyNA(temp)   #--> TRUE
#MODULARITY EXAMPLE -> na.omit
#Application with Precipitation data
source(file = "na_delete.R")
pre_clean <- na_delete(precip)
dim(pre_clean)
#Application with Temperature data
temp_clean <- na.omit(temp)
dim(temp_clean)
anyNA(temp_clean) #--> FALSE
values <- 40 #Here, I show the value of the data requirement that I need, In
# this case, 40.
prec_40 <- pre_clean %>%
group_by(state, name, lon, lat) %>%
filter(n()>=values )%>%
ungroup()
#Temperature --> the same way (at least 40 measurements)
temp_40 <- temp_clean %>%
group_by(state, name, lon, lat) %>%
filter(n()>=values )%>%
ungroup()
#5. Slopes
#MODULARITY EXAMPLE ->  create the function to do the slopes and just call the
#name of the fucntion here. This function can work for both of my data sets(vars)
source(file = "slopes_vars.R")
#Precipitation
slopes_p <- prec_40 %>%
group_by(state, name, lon, lat) %>%
summarize(slope = slopes_vars(cur_data()))
print(slopes_p)
#Temperature
slopes_t <- temp_40 %>%
group_by(state, name, lon, lat) %>%
summarize(slope = slopes_vars(cur_data()))
print(slopes_t)
#Details for the histogram
#color blind friendly
source(file = "colores.R")
pdf(file = "AQ_hist_temp.pdf")
title<-"Histogram of temperature slopes"
palette <- colores("blind_fr")
xlab <- "Temp slope"
ylab <- "Frequency"
hist(slopes_t$slope,50, main= title, col =palette, xlab = xlab, ylab = ylab )
legend("topright", legend = "Note: this histogram contains
blind friendly colors",  cex = 0.5)
dev.off()
title_1<-"Histogram of precipitation slopes"
palette_1 <- colores("non_blind_fr")
xlab_1 <- "Precip slope"
ylab <- "Frequency"
hist(slopes_p$slope, 50, main= title_1, col =palette_1, xlab = xlab_1, ylab = ylab)
title<-"Histogram of temperature slopes"
palette <- colores("blind_fr")
xlab <- "Temp slope"
ylab <- "Frequency"
hist(slopes_t$slope,50, main= title, col =palette, xlab = xlab, ylab = ylab )
legend("topright", legend = "Note: this histogram contains
blind friendly colors",  cex = 0.5)
title_1<-"Histogram of precipitation slopes"
palette_1 <- colores("non_blind_fr")
xlab_1 <- "Precip slope"
ylab <- "Frequency"
hist(slopes_p$slope, 50, main= title_1, col =palette_1, xlab = xlab_1, ylab = ylab)
legend("topright", legend = "Note: this histogram contains
non blind friendly colors",  cex = 0.5)
#To do the map I used ggplot2
plot1 <- ggplot(slopes_t,  aes(x = lon, y = lat, color = slope)) +
borders("state") +  geom_point(size = 0.5) +
scale_color_gradientn(colors = colores("blind_fr", n=10)) +
labs(title = "Map of temperature slopes", x = "Longitude", y = "Latitude", color = "slope") +
theme_minimal()
map_1 <- map_data("state")
plot2 <- ggplot() +
geom_polygon(data = map_1, aes(x = long, y = lat, group = group), fill = "lightgrey", color = "white") +
geom_point(data = slopes_p, aes(x = lon, y = lat, color = slope), size = 0.2) +
scale_color_gradientn(colors = colores("non_blind_fr", n=10)) +
labs(title = "Map of Precipitation Slopes", color = "Slope (Precipitation)") +
theme_minimal() +
coord_fixed(1.3)
x11()
par(mfrow = c(1, 2))
hist(slopes_t$slope,50, main= title, col =palette, xlab = xlab, ylab = ylab )
hist(slopes_p$slope, 50, main= title_1, col =palette_1, xlab = xlab_1, ylab = ylab)
#maps ...
x11()
grid.arrange(plot1, plot2, nrow = 2)
plot1
plot2
