#**load the data and simplify
setwd("C:/Users/asque/Documents/ML/QuezadaMLbiol/UnitCART/own_data/")
numbers <- c(1:5)
sample(c(1,5,3,9),4,replace=TRUE)
sample(c(1,5,3,9),4,replace=TRUE)
sample(numbers, replace = TRUE)
sample(numbers, replace = TRUE)
sample(numbers, replace = TRUE)
sample(numbers, 7, replace = TRUE)
sample(numbers, 7, replace = FALSE)
sample(numbers, 5, replace = FALSE)
# Cargar el archivo .txt
d <- read.table("agaricus-lepiota.data.txt", header = TRUE, sep = ",")
#**load the data and simplify
setwd("C:/Users/asque/Documents/ML/QuezadaMLbiol/UnitCART/own_data")
# Cargar el archivo .txt
d <- read.table("agaricus-lepiota.data.txt", header = TRUE, sep = ",")
# Cargar el archivo .txt
d <- read.table("agaricus-lepiota.data.txt", header = F, sep = ",")
# Cargar el archivo .txt
d <- read.table("agaricus-lepiota.data", header = F, sep = ",")
# Mostrar las primeras filas del archivo
head(d)
names(d)<-c("poisonoues", "cap_shape", "cap-surface", "cap_color", "bruises",
"odor", "gill-attachment", "gill-spacing", "gill-size", "gil-color",
"stalk-shape", "stalk-root", "stalk-surface-above-ring", "stalk-surface-below-ring",
"stalk-surface-below-ring", "stalk-color-below-ring", "veil-type", "veil-color",
"ring-number", "ring-type", "spore-print-color", "population", "habitat")
head(d) #renamed for simplicity
names(d)<-c("poisonous", "cap_shape", "cap-surface", "cap_color", "bruises",
"odor", "gill-attachment", "gill-spacing", "gill-size", "gil-color",
"stalk-shape", "stalk-root", "stalk-surface-above-ring", "stalk-surface-below-ring",
"stalk-surface-below-ring", "stalk-color-below-ring", "veil-type", "veil-color",
"ring-number", "ring-type", "spore-print-color", "population", "habitat")
head(d) #renamed for simplicity
unique(d$poisonous)
d$diagnosis<-as.factor(d$poisonous)
#split
set.seed(101)
d_perm<-d[sample(dim(d)[1],dim(d)[1],replace=FALSE),]
d_val<-d_perm[1:floor(.75*(dim(d)[1])),]
d_test<-d_perm[(floor(.75*(dim(d)[1]))+1):(dim(d)[1]),]
#some consistency checks
dim(d)
dim(d_perm)
dim(d_val)
dim(d_test)
dim(d_val)[1]+dim(d_test)[1]
#fit a CART
m_d<-rpart(poisonous~.,
data=d_val,method="class")
library(rpart)
#fit a CART
m_d<-rpart(poisonous~.,
data=d_val,method="class")
names(d)<-c("poisonous", "cap_shape", "cap-surface", "cap_color", "bruises",
"odor", "gill-attachment", "gill-spacing", "gill-size", "gil-color",
"stalk-shape", "stalk-root", "stalk-surface-above-ring", "stalk-surface-below-ring",
"stalk-color-above-ring", "stalk-color-below-ring", "veil-type", "veil-color",
"ring-number", "ring-type", "spore-print-color", "population", "habitat")
head(d) #renamed for simplicity
#split
set.seed(101)
d_perm<-d[sample(dim(d)[1],dim(d)[1],replace=FALSE),]
d_val<-d_perm[1:floor(.75*(dim(d)[1])),]
d_test<-d_perm[(floor(.75*(dim(d)[1]))+1):(dim(d)[1]),]
#some consistency checks
dim(d)
dim(d_perm)
dim(d_val)
dim(d_test)
dim(d_val)[1]+dim(d_test)[1]
#fit a CART
m_d<-rpart(poisonous~.,
data=d_val,method="class")
#examine it
m_d #pretty simple
plot(m_d,uniform=TRUE,margin=0.1)
text(m_d,use.n=TRUE,all=TRUE,cex=0.8)
#save as pdf
pdf(file="RTree_m_mushrooms.pdf")
plot(m_d,uniform=TRUE,margin=0.1)
text(m_d,use.n=TRUE,all=TRUE,cex=2)
dev.off()
#see the errors it makes on the training data
m_d_pred<-predict(m_d,type="class")
table(m_d_pred,d_val$diagnosis)
table(m_d_pred,d_val$poisonous)
sum(m_d_pred!=d_val$poisonous)/dim(d_val)[1] #Fraction of mis-classifications
#fit it - setting cp=0 and minsplit=1 means the algorithm does not stop until impurity
#is 0, even if it's necessary to sometimes go all the way to leaf nodes which have only
#one element to do that
m_f<-rpart(poisonous~.,
data=d_val,method="class",
control=rpart.control(cp=0,minsplit=1))
#examine it
m_f
plot(m_f,uniform=TRUE,margin=0.1) #it is huge!
text(m_f,use.n=TRUE,all=TRUE,cex=0.8)
#see the errors it makes on the training data
m_f_pred<-predict(m_f,type="class")
table(m_f_pred,d_val$poisonous) #so it is perfect, as it should be given how we
head(d)
xlim=range(d_val$concave_points),ylim=range(d_val$population),cex=.5,col="red")
xlim=range(d_val$concave_points),ylim=range(d_val$population),cex=.5,col="red")
xlim=range(d_val$concave_points) ,ylim=range(d_val$population),cex=.5,col="red")
numgp<-10 #number of folds in k-fold cross validation
gp<-rep(1:numgp,length.out=dim(d_val)[1])
xerrs_d<-NA*numeric(numgp)
xerrs_f<-NA*numeric(numgp)
points(d_val$concave_points[d_val$bruises=="B"],d_val$gill-size[d_val$gill-size=="b"],
pch=4,col="green",cex=.5)
plot(d_val$concave_points[d_val$poisonous=="p"],d_val$bruises[d_val$poisonous=="p"],
xlim=range(d_val$concave_points) ,ylim=range(d_val$bruises),cex=.5,col="red")
xlim=range(d_val$concave_points) ,ylim=range(d_val$bruises),cex=.5,col="red")
plot(d_val$concave_points[d_val$poisonous=="p"],d_val$bruises[d_val$poisonous=="p"],
xlim=range(d_val$concave_points) ,ylim=range(d_val$bruises),cex=.5,col="red")
points(d_val$concave_points[d_val$bruises=="B"],d_val$gill-size[d_val$gill-size=="b"],
pch=4,col="green",cex=.5)
lines(rep(0.05592,2),c(0,100),type="l")
